#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <random>
#include <iostream>
#include <fstream>
#include <math.h>
#include <chrono>

using namespace std;

double f(double x, int k)
{
    switch (k)
    {
        case 1:
            return pow(x,(1/3.0));    
            break;
        case 2:
            return sin(x);
            break;
        case 3:
            return 4*x*(pow( (1-x) , 3));
            break;
        default:
            break;
    } 
}


float integralProb (float a, float b, float M, int n, int functionNr, mt19937 mt){
    double pointX;
    double pointY;
    int counter = 0;
    uniform_real_distribution<double> disX(a,b);
    uniform_real_distribution<double> disY(0.0, M);

    for(int i = 0; i < n; i++){
        // random = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
        // pointX = a + (b-a)*random;
        // random = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
        // pointY = M*random;
        pointX = disX(mt);
        pointY = disY(mt);
        
        // cout << f(pointX,functionNr) << " ";
        if(i = 0){
            cout<< pointX<< " " <<pointY << "\n";
        }
        if(pointY <= f(pointX,functionNr)){
            counter++;
        }
    }
    //cout << mt << " ";
    return ((float)counter/n)*(b-a)*M;
}

int main (int argc, char** argv)
{
    ofstream myFile;
    myFile.open ("results.txt");
    myFile << "n;";

    for(int i = 1; i <= 50; i++ ){
        myFile << "Wynik " << i << ';';
    }
    myFile << '\n';

    srand (static_cast <unsigned> (time(NULL)));
    mt19937 mt { 
        static_cast<unsigned int>(chrono::steady_clock::now().time_since_epoch().count()) 
    };

    for(int n = 50; n <= 5000; n += 50){
        for(int i = 0; i < 50; i++ ){
            
            myFile << integralProb (0,8,2,n,1,mt) << ';';
        }
        myFile << "\n";
        //cout<< "\n";
    }
    myFile.close();
    return 0;
}




